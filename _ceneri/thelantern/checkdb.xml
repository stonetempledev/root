<config namespace="page">
  <vars>
    <var name="preinit-qry">preinit-qry</var>
  </vars>
  <tables>
    <table name="checks" cols="id,group,title,des,qry_exists,qry_miss,qry_more,qry_init,qry_do,qry_reset">
      <rows>
        <!-- certificati -->
        <row id="mk" group="CERTIFICATI" title="Master Key" des="controllo esistenza master key" qry_exists="check_mk" qry_init="create_mk"/>
        <row id="cer" title="Certificato SQL" des="controllo esistenza certificato sql server" qry_exists="check_cer" qry_init="create_cer"/>
        <row id="sk" title="Symmetric Key" des="controllo esistenza symmetric key" qry_exists="check_sk" qry_init="create_sk"/>
        <!-- database -->
        <row id="db_tbls" group="DATABASE" title="Tabelle obsolete" des="controllo presenza tabelle obsolete" qry_do="check_tables_more"/>
        <row id="db_fncs" title="Funzioni" des="controllo esistenza funzioni" qry_miss="check_fncs_miss" qry_init="check_fncs_init" qry_reset="check_fncs_init"/>
        <!-- utenti -->
        <row id="au" group="GESTIONE UTENTI" title="Tabella Azioni Utenti" des="controllo esistenza tabella azioni utenti" qry_exists="check_au" qry_init="create_au" qry_reset="reset_au"/>
        <row id="c_au" title="Contenuti Tabella Azioni Utenti" des="controllo contenuti tabella azioni utenti" qry_miss="check_au_miss" qry_more="check_au_more" qry_init="init_c_au"/>
        <row id="lau" title="Tabella Log Utenti" des="controllo esistenza tabella log azioni utenti" qry_exists="check_lau" qry_init="create_lau" qry_reset="reset_lau"/>
        <row id="u" title="Tabella Utenti" des="controllo esistenza tabella utenti" qry_exists="check_u" qry_init="create_u" qry_reset="reset_u"/>
        <!-- struttura nodi -->
        <row id="nd" group="GERARCHIA DATI" title="Tabella Nodi" des="controllo esistenza tabella nodi" qry_exists="check_nd" qry_init="create_nd" qry_reset="reset_nd"/>
        <row id="cls" title="Tabella Classi" des="controllo esistenza tabella classi" qry_exists="check_cls" qry_init="create_cls" qry_reset="reset_cls"/>
        <row id="c_cls" title="Definizione Classi" des="controllo definizione classi" qry_miss="check_cls_miss" qry_more="check_cls_more" qry_init="init_c_cls"/>
        <row id="objs" title="Tabella Objects" des="controllo esistenza tabella oggetti" qry_exists="check_objs" qry_init="create_objs" qry_reset="reset_objs"/>
        <!-- oggetti struttura -->
        <row id="nts" title="Tabella Notes" des="controllo esistenza tabella note" qry_exists="check_nts" qry_init="create_nts" qry_reset="reset_nts"/>
      </rows>
    </table>
  </tables>

  <queries>
    <queries name="preinit-qry">
      <query>
        <![CDATA[if not exists (select * from sysobjects where id = object_id(N'split') and xtype in ('fn', 'if', 'tf'))
        begin
        exec ('CREATE FUNCTION [dbo].[split] (@str varchar(8000), @sep char(1) = '','')     
   returns @tbl TABLE (item varchar(8000))     
  as     
  begin     

   if len(@str) < 1 or @str is null  
    return;

   declare @slice varchar(8000), @idx int;
   set @idx = 1;
   while @idx != 0
   begin
      set @idx = charindex(@sep, @str)
      if @idx!=0     
          set @slice = left(@str, @idx - 1)     
      else     
          set @slice = @str     

      if(len(@slice) > 0)
          insert into @tbl(Item) values(ltrim(rtrim(@slice)))     

      set @str = right(@str, len(@str) - @idx)     
      if len(@str) = 0 break     
   end 
 
   return

  end')
end]]>
      </query>
    </queries>

    <!--                                         CHECK GENERALE - FUNZIONI -->

    <query name="check_fncs_miss">
      <![CDATA[select count(*) from information_schema.routines s 
 where s.routine_type = 'function'
  and not exists (select top 1 1 
  from dbo.split('split,node_path,node_path_id', ',') t where t.item = s.routine_name)]]>
    </query>

    <queries name="check_fncs_init">
      <query>
        <![CDATA[if exists (select * from sysobjects where id = object_id(N'node_path') and xtype in (N'fn', N'if', N'tf'))
    drop function node_path]]>
      </query>
      <query>
        <![CDATA[create function [dbo].[node_path](@id_node int)
returns varchar(max)
as
begin      

 declare @path varchar(max);

 with cartelle (parent_id, id_node, title, livello)
 as
 (select parent_id, id_node, title, 0 as livello
    from nodes 
     where id_node = @id_node 
   union all select e.parent_id, e.id_node, e.title, livello - 1
    from nodes e
    inner join cartelle d on d.parent_id = e.id_node and d.id_node <> d.parent_id)
 select @path = coalesce(@path + '/', '') + title
  from cartelle order by livello
  
 return (case when @path is not null then '/' + @path + '/' else @path + '/' end);
 
end]]>
      </query>
      <query>
        <![CDATA[if exists (select * from sysobjects where id = object_id(N'node_path_id') and xtype in (N'fn', N'if', N'tf'))
    drop function node_path_id]]>
      </query>
      <query>
        <![CDATA[create function [dbo].[node_path_id](@id_node int)
returns varchar(max)
as
begin      

 declare @path varchar(max);

 with cartelle (parent_id, id_node, title, livello)
 as
 (select parent_id, id_node, title, 0 as livello
    from nodes 
     where id_node = @id_node 
   union all select e.parent_id, e.id_node, e.title, livello - 1
    from nodes e
    inner join cartelle d on d.parent_id = e.id_node and d.id_node <> d.parent_id)
 select @path = coalesce(@path + '/', '') + cast(id_node as varchar)
  from cartelle order by livello
  
 return (case when @path is not null then '/' + @path + '/' else @path  + '/' end);
 
end]]>
      </query>
    </queries>

    <!--                                         SECURITY -->
    <!-- mk 
    DROP MASTER KEY
    SELECT * FROM SYS.SYMMETRIC_KEYS 
    -->
    <query name="check_mk">
      <![CDATA[SELECT COUNT(*) FROM SYS.SYMMETRIC_KEYS WHERE NAME LIKE '%DatabaseMasterKey%']]>
    </query>
    <query name="create_mk"><![CDATA[CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'Homme33!']]></query>
    <!-- cer 
    SELECT * FROM SYS.CERTIFICATES 
    DROP CERTIFICATE tL180204 
    -->
    <query name="check_cer">
      <![CDATA[SELECT COUNT(*) FROM SYS.CERTIFICATES WHERE NAME = 'tL180204']]>
    </query>
    <query name="create_cer"><![CDATA[CREATE CERTIFICATE tL180204 WITH SUBJECT = 'the Lantern']]></query>
    <!-- sk 
    SELECT * FROM SYS.SYMMETRIC_KEYS
    DROP SYMMETRIC KEY tl01 
    -->
    <query name="check_sk">
      <![CDATA[SELECT COUNT(*) FROM SYS.SYMMETRIC_KEYS WHERE NAME = 'tl01']]>
    </query>
    <query name="create_sk"><![CDATA[CREATE SYMMETRIC KEY tl01 WITH ALGORITHM = AES_256 ENCRYPTION BY CERTIFICATE tL180204]]></query>

    <!--                                         CHECK GENERALE - TABELLE -->

    <query_do name="check_tables_more" des="c'è almeno una o più tabelle obsolete">
      <do>
        <![CDATA[select s.table_name from information_schema.tables s
       where not exists (select top 1 1 
        from dbo.split('azioni_utenti,log_azioni_utenti,utenti,nodes,classes,objects,notes', ',') t where t.item = s.table_name)]]>
      </do>
      <while><![CDATA[drop table {@field='table_name'}]]></while>
    </query_do>

    <!--                                         SINGOLE TABELLE -->

    <!-- TABELLA AZIONI_UTENTI 
    select * from azioni_utenti
    drop table azioni_utenti
    truncate table azioni_utenti;
    -->
    <query name="check_au">
      <![CDATA[SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'azioni_utenti']]>
    </query>
    <query name="init_c_au">
      <![CDATA[truncate table azioni_utenti;
      insert into azioni_utenti (id_azione, azione)
    values (1, 'login'), (2, 'logout'), (3, 'repassword'), (4, 'req_repassword');]]>
    </query>
    <queries name="create_au">
      <query>
        <![CDATA[CREATE TABLE [dbo].[azioni_utenti]([id_azione] [int] NOT NULL, azione varchar(25) not null, PRIMARY KEY CLUSTERED ([id_azione] ASC));
        CREATE INDEX idx_azioni_utenti on azioni_utenti (azione);]]>
      </query>
      <exec_query name="init_c_au"/>
    </queries>
    <queries name="reset_au">
      <query>
        <![CDATA[DROP TABLE [dbo].[azioni_utenti];]]>
      </query>
      <exec_query name="create_au"/>
    </queries>

    <query name="check_au_miss">
      <![CDATA[select count(*)
        from (select t.id_azione
          , (select count(*) from azioni_utenti where id_azione = t.id_azione) as cc
        from(select 1 as id_azione union select 2 union select 3 union select 4) as t) as t2
	       where t2.cc = 0]]>
    </query>

    <query name="check_au_more">
      <![CDATA[select count(*) from
(select a.id_azione from azioni_utenti a 
 where not exists (select top 1 1 from (select 1 as id_azione union select 2 union select 3 union select 4) t 
  where t.id_azione = a.id_azione)) t2]]>
    </query>

    <!-- TABELLA LOG_AZIONI_UTENTI 
    select * from log_azioni_utenti
    drop table log_azioni_utenti
    -->
    <query name="check_lau">
      <![CDATA[SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'log_azioni_utenti']]>
    </query>
    <query name="create_lau">
      <![CDATA[CREATE TABLE [dbo].[log_azioni_utenti]([id_utente] [int] NOT NULL, id_azione int not null, dt_ins datetime not null);
      CREATE INDEX idx_log_azioni_utenti on log_azioni_utenti (id_utente);
      CREATE INDEX idx_log_azioni_utenti_2 on log_azioni_utenti (id_azione);]]>
    </query>
    <queries name="reset_lau">
      <query>
        <![CDATA[DROP TABLE [dbo].[log_azioni_utenti];]]>
      </query>
      <exec_query name="create_lau"/>
    </queries>

    <!-- TABELLA UTENTI 
    select * from azioni_utenti
    drop table azioni_utenti
    truncate table azioni_utenti;
    -->
    <query name="check_u">
      <![CDATA[SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'utenti']]>
    </query>
    <query name="create_u">
      <![CDATA[CREATE TABLE [dbo].[utenti]([id_utente] [int] IDENTITY(1,1) NOT NULL
  , [enc_nome] [varbinary](128) NOT NULL,[enc_email] [varbinary](128) NOT NULL, [pwd] [varchar](100) NOT NULL
  , [dt_ins] [datetime] NOT NULL, [dt_upd] [datetime] NULL, [dt_activate] [datetime] NULL, [tmp_key] [varchar](32) NULL
  , [activate_key] [varchar](32) NULL, [activated] [int] NULL, PRIMARY KEY CLUSTERED ([id_utente] ASC));]]>
    </query>
    <queries name="reset_u">
      <query>
        <![CDATA[DROP TABLE [dbo].[utenti];]]>
      </query>
      <exec_query name="create_u"/>
    </queries>

    <!-- TABELLA NODES
    select * from nodes
    drop table nodes
    truncate table nodes;
    -->
    <query name="check_nd">
      <![CDATA[SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'nodes']]>
    </query>
    <queries name="create_nd">
      <query>
        <![CDATA[CREATE TABLE [dbo].[nodes]([id_node] [int] IDENTITY(1,1) NOT NULL, [parent_id] [int] NULL
       , [title] [varchar](50) NOT NULL, [notes] [varchar](250) NULL, [path_node] [varchar](250) NOT NULL
       , [dt_ins] [datetime] NOT NULL, [dt_upd] [datetime] NULL, PRIMARY KEY CLUSTERED ([id_node] ASC));
      create unique index idx_n_1 on nodes (parent_id, title);
      create index idx_n_2 on nodes (parent_id);
      create index idx_n_3 on nodes (title);
      create index idx_n_4 on nodes (path_node);]]>
      </query>
    </queries>
    <queries name="reset_nd">
      <query>
        <![CDATA[DROP TABLE [dbo].[nodes];]]>
      </query>
      <exec_query name="create_nd"/>
    </queries>

    <!-- TABELLA CLASSES
    select * from classes
    drop table classes
    truncate table classes;
    -->
    <query name="check_cls">
      <![CDATA[SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'classes']]>
    </query>
    <queries name="create_cls">
      <query>
        <![CDATA[CREATE TABLE [dbo].[classes]([id_class] [int] NOT NULL
       , [name] [varchar](50) NOT NULL, [notes] [varchar](500) NULL
       , [details] [varchar](max) NULL, PRIMARY KEY CLUSTERED ([id_class] ASC));
      create unique index idx_cls_1 on classes (name);]]>
      </query>
    </queries>
    <queries name="reset_cls">
      <query>
        <![CDATA[DROP TABLE [dbo].[classes];]]>
      </query>
      <exec_query name="create_cls"/>
    </queries>

    <query name="init_c_cls">
      <![CDATA[truncate table classes;
      insert into classes (id_class, name, notes, details)
    values (1, 'note', 'singola nota testuale', null);]]>
    </query>

    <query name="check_cls_miss">
      <![CDATA[select count(*)
        from (select t.id_class
          , (select count(*) from classes where id_class = t.id_class) as cc
        from(select 1 as id_class) as t) as t2
	       where t2.cc = 0]]>
    </query>

    <query name="check_cls_more">
      <![CDATA[select count(*) from
(select a.id_class from classes a 
 where not exists (select top 1 1 from (select 1 as id_class) t 
  where t.id_class = a.id_class)) t2]]>
    </query>

    <!-- TABELLA OBJECTS
    select * from objects
    drop table objects
    truncate table objects;
    -->
    <query name="check_objs">
      <![CDATA[SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'objects']]>
    </query>
    <queries name="create_objs">
      <query>
        <![CDATA[CREATE TABLE [dbo].[objects]([id_object] [int] IDENTITY(1,1) NOT NULL
        , [id_node] [int] NOT NULL, [id_class] [int] NOT NULL
        , [dt_ins] [datetime] NOT NULL, [dt_upd] [datetime] NULL, PRIMARY KEY CLUSTERED ([id_object] ASC));
      create index idx_objs_1 on objects (id_node);
      create index idx_objs_2 on objects (id_node, id_class);]]>
      </query>
    </queries>
    <queries name="reset_objs">
      <query>
        <![CDATA[DROP TABLE [dbo].[objects];]]>
      </query>
      <exec_query name="create_objs"/>
    </queries>

    <!-- TABELLA NOTES
    select * from notes
    drop table notes
    truncate table notes;
    -->
    <query name="check_nts">
      <![CDATA[SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'notes']]>
    </query>
    <queries name="create_nts">
      <query>
        <![CDATA[CREATE TABLE [dbo].[notes]([id_object] [int] NOT NULL
       , [title] [varchar](100) NOT NULL, [notes] [varchar](500) NULL, PRIMARY KEY CLUSTERED ([id_object] ASC));]]>
      </query>
    </queries>
    <queries name="reset_nts">
      <query>
        <![CDATA[DROP TABLE [dbo].[notes];]]>
      </query>
      <exec_query name="create_nts"/>
    </queries>

  </queries>

</config>

