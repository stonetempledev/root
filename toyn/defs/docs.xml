<config>
  <queries>
    <query name="elements-attributes">
      <![CDATA[select a.element_type, a.attribute_id
  , a.attribute_code, a.attribute_type, a.content_txt_xml, a.data_content, a.static_value
 from vw_types_attributes a
 order by a.element_type, a.attribute_code]]>
    </query>
    <query name="types-attributes">
      <![CDATA[select ta.element_type, ta.element_des, ta.childs_types
      , ta.attribute_id, ta.attribute_code, ta.attribute_type, ta.content_txt_xml, ta.data_content, ta.static_value
 from vw_types_attributes ta
 order by ta.element_type, ta.attribute_code]]>
    </query>
    <query name="type-attributes">
      <![CDATA[select ta.element_type, ta.element_des, ta.childs_types
      , ta.attribute_id, ta.attribute_code, ta.attribute_type, ta.content_txt_xml, ta.data_content, ta.static_value
 from vw_types_attributes ta
 where ta.element_type = '{@field='type'}'
 order by ta.element_type, ta.attribute_code]]>
    </query>
    <query name="element-attribute">
      <![CDATA[select a.element_type, a.attribute_id
  , a.attribute_code, a.attribute_type, a.content_txt_xml, a.data_content, a.static_value
 from vw_types_attributes a
 where a.element_type = '{@field='type'}' and a.attribute_code = '{@field='code'}']]>
    </query>
    <query name="open-roots-elements">
      <![CDATA[select h.parent_id, h.elements_contents_id, h.livello, h.in_list, h.element_id, h.element_code, h.element_type, et.element_des, h.element_title
  , (select top 1 1 from elements_contents where element_id = h.element_id) as has_childs
  , (select top 1 1 from elements_contents ec join elements e on e.element_id = ec.child_element_id and e.element_type = 'element' where ec.element_id = h.element_id) as has_child_elements
  , h.[order], isnull(a.dt_ins, h.dt_ins) as dt_ins, h.dt_stored, a.dt_upd
  , a.attribute_code, a.attribute_type, a.content_txt_xml, a.data_content, a.static_value, a.val_datetime, a.val_integer, a.val_link, a.val_real, a.val_text, a.val_varchar, a.val_flag
 from vw_elements_h h
 join elements_types et on et.element_type = h.element_type
 left join vw_elements_attrs a on a.element_id = h.element_id 
 where {@field='filter_deleted'} and h.[user_id] = {@field='user_id'} and h.ref_element_id = -1 and {@field='filter_level'}
 order by h.livello, h.[order], h.element_id]]>
    </query>
    <query name="open-elements">
      <![CDATA[select t.*
from (
select h.parent_id, h.elements_contents_id, 0 as livello, h.in_list, h.element_id, h.element_code, h.element_type, et.element_des, h.element_title
  , null as has_childs, null as has_child_elements, h.[order]
  , isnull(a.dt_ins, h.dt_ins) as dt_ins, a.dt_upd, h.dt_stored, a.attribute_code, a.attribute_type, a.content_txt_xml
  , a.data_content, a.static_value, a.val_datetime, a.val_integer, a.val_link, a.val_real, a.val_text, a.val_varchar, a.val_flag
 from vw_elements_p h
 join elements_types et on et.element_type = h.element_type
 left join vw_elements_attrs a on a.element_id = h.element_id 
 where h.[user_id] = {@field='user_id'} and isnull(h.deleted, 0) = 0 and h.element_id = {@field='id_element'} {@field='filter_head'}
union select h.parent_id, h.elements_contents_id, h.livello + 1 as livello, h.in_list, h.element_id, h.element_code, h.element_type, et.element_des, h.element_title
  , (select top 1 1 from elements_contents where element_id = h.element_id) as has_childs
  , (select top 1 1 from elements_contents ec join elements e on e.element_id = ec.child_element_id and e.element_type = 'element'
      where ec.element_id = h.element_id) as has_child_elements, h.[order]
  , a.dt_ins, a.dt_upd, h.dt_stored, a.attribute_code, a.attribute_type, a.content_txt_xml, a.data_content, a.static_value
  , a.val_datetime, a.val_integer, a.val_link, a.val_real, a.val_text, a.val_varchar, a.val_flag
 from vw_elements_h h
 join elements_types et on et.element_type = h.element_type
 left join vw_elements_attrs a on a.element_id = h.element_id 
 where {@field='filter_deleted'} and h.[user_id] = {@field='user_id'} and h.ref_element_id = {@field='id_element'} and {@field='filter_level'} {@field='filter_childs'} ) t
 order by t.livello, t.[order], t.element_id]]>
    </query>
    <query name="open-parents-elements">
      <![CDATA[select h.parent_id, h.elements_contents_id, h.livello, null as in_list, h.element_id, h.element_code, h.element_type, et.element_des, h.element_title
  , (select top 1 1 from elements_contents where element_id = h.element_id) as has_childs
  , (select top 1 1 from elements_contents ec join elements e on e.element_id = ec.child_element_id and e.element_type = 'element' where ec.element_id = h.element_id) as has_child_elements
  , h.[order], h.dt_ins, h.dt_stored, a.dt_upd
  , a.attribute_code, a.attribute_type, a.content_txt_xml, a.data_content, a.static_value, a.val_datetime, a.val_integer, a.val_link, a.val_real, a.val_text, a.val_varchar, a.val_flag
 from vw_elements_c h
 join elements_types et on et.element_type = h.element_type
 left join vw_elements_attrs a on a.element_id = h.element_id 
 where h.[user_id] = {@field='user_id'} and h.ref_element_id = {@field='element_id'}
  {@field_cond='parent_id','parent-filter'}
 order by h.livello, h.element_id]]>
      <filter name="parent-filter">
        <![CDATA[and h.livello >= (select top 1 livello from vw_elements_c 
   where ref_element_id = {@field='element_id'} and [user_id] = {@field='user_id'} and element_id = {@field='parent_id'} order by livello)]]>
      </filter>
    </query>
    <query name="parent-elements">
      <![CDATA[select parent_id from vw_elements_c where dt_del is null and ref_element_id = {@field='id_element'} and parent_id > 0]]>
    </query>
    <query name="check-exists-elements">
      <![CDATA[select element_id from [elements]
        where element_id in ({@field='ids_elements'}) and isnull(deleted, 0) = 0 and [user_id] = {@field='user_id'}]]>
    </query>
    <query name="exists-element">
      <![CDATA[select top 1 1 from elements e where isnull(e.deleted, 0) = 0 and e.element_id = {@field='id_element'}]]>
    </query>
    <query name="deleted-element">
      <![CDATA[select top 1 1 from elements e where isnull(e.deleted, 0) > 0 and e.element_type = '{@field='type_element'}' and e.element_id = {@field='id_element'}]]>
    </query>
    <query name="has-childs">
      <![CDATA[select e.element_id
        , (select top 1 1 from elements_contents where element_id = e.element_id) as has_childs
        , (select top 1 1 from elements_contents ec join elements e on e.element_id = ec.child_element_id and e.element_type = 'element'
            where ec.element_id = e.element_id) as has_child_elements
      from [elements] e where e.element_id = {@field='id_element'}
      ]]>
    </query>
    <query name="id-deleted">
      <![CDATA[select isnull(max(deleted), 0) + 1 as id_deleted from [elements] where [user_id] = {@field='user_id'}]]>
    </query>
    <query name="delete-element">
      <![CDATA[update e set e.deleted = {@field='id_deleted'}, e.dt_del = getdate() 
          from [elements] e where e.element_id = {@field='id_element'}
           or e.element_id in (select distinct element_id from vw_elements_h 
            where isnull(deleted, 0) = 0 and ref_element_id = {@field='id_element'});
           update ec set ec.[order] = null
            from elements_contents ec
            join elements e on e.element_id = ec.child_element_id and e.deleted = {@field='id_deleted'};]]>
    </query>
    <query name="refresh-orders">
      <![CDATA[update ec set ec.[order] = ec.[order] + {@field='diff_order'}
          from elements_contents ec
          join [elements] e on e.element_id = ec.child_element_id and e.[user_id] = {@field='user_id'}
          where ec.element_id {@field='filter_id_element'} and ec.[order] > {@field='filter_order'}]]>
    </query>
    <query name="save-child">
      <![CDATA[delete from elements_contents where child_element_id = {@field='id_element'};
      insert into elements_contents (element_id, child_element_id, [order])
        values ({@field='id_parent'}, {@field='id_element'}, {@field='order'});]]>
    </query>
    <query name="save-element">
      <![CDATA[insert into [elements] (element_code, element_type, element_title, [user_id])
        values ({@txtqry='code'}, {@txtqry='type'}, {@txtqry='title'}, {@field='user_id'})]]>
    </query>
    <query name="refresh-orders-child">
      <![CDATA[update ec set ec.[order] = t.new_order - 1
 from elements_contents ec
 join (
 select ec.*, ROW_NUMBER() OVER(ORDER BY [order] ASC) AS new_order
  from elements_contents ec
  where ec.element_id = (select element_id from elements_contents where child_element_id = {@field='child_id'})
   and ec.[order] is not null) t on t.elements_contents_id = ec.elements_contents_id]]>
    </query>
    <query name="refresh-orders-element">
      <![CDATA[update ec set ec.[order] = t.new_order - 1
 from elements_contents ec
 join (
 select ec.*, ROW_NUMBER() OVER(ORDER BY [order] ASC) AS new_order
  from elements_contents ec
  where ec.element_id = {@field='element_id'}
   and ec.[order] is not null) t on t.elements_contents_id = ec.elements_contents_id]]>
    </query>
    <query name="update-element">
      <![CDATA[update [elements] set element_code = {@txtqry='code'}, element_type = {@txtqry='type'}
          , element_title = {@txtqry='title'}, deleted = NULL, dt_upd = getdate()
        where element_id = {@field='id_element'} and (element_type <> {@txtqry='type'} or deleted is not null
         or isnull(element_title, '') <> isnull({@txtqry='title'}, '') 
         or isnull(element_code, '') <> isnull({@txtqry='code'}, ''))]]>
    </query>
    <query name="store-element">
      <![CDATA[update [elements] set dt_stored = getdate()
        where element_id = {@field='id_element'}]]>
    </query>
    <query name="unstore-element">
      <![CDATA[update [elements] set dt_stored = null
        where element_id = {@field='id_element'}]]>
    </query>
    <query name="undelete-childs">
      <![CDATA[update e set e.deleted = null
         from [elements] e
         join vw_elements_h h on h.ref_element_id = {@field='id_element'} and h.element_id = e.element_id]]>
    </query>
    <query name="reset-contents">
      <![CDATA[delete ec from elements_contents ec where ec.element_id = {@field='id_element'}
        and not exists (select top 1 1 from elements where element_id = {@field='id_element'} and deleted > 0)
        and not exists (select top 1 1 from elements where element_id = ec.child_element_id and deleted > 0)]]>
    </query>
    <query name="save-child-content">
      <![CDATA[delete from elements_contents where child_element_id = {@field='id_child'};
        insert into elements_contents (element_id, child_element_id, [order])
         values ({@field='id_element'}, {@field='id_child'}, {@field='order'});]]>
    </query>
    <query name="delete-attribute">
      <![CDATA[delete ea from [elements_attrs_{@field='attr_type'}] ea 
            where ea.element_id = {@field='id_element'} 
             and ea.attribute_id in (select attribute_id from attributes where attribute_code = '{@field='attr_code'}')]]>
    </query>
    <query name="set-attribute">
      <![CDATA[if exists (select top 1 1 from [elements_attrs_{@field='attr_type'}] ea
          where ea.element_id = {@field='id_element'} 
           and ea.attribute_id in (select attribute_id from attributes where attribute_code = '{@field='attr_code'}'))
          begin
            update ea set ea.value = {@field='attr_value'}
              , ea.attribute_id = (select attribute_id from attributes where element_type = '{@field='element_type'}' and attribute_code = '{@field='attr_code'}')
             from [elements_attrs_{@field='attr_type'}] ea
             where ea.element_id = {@field='id_element'} 
              and (ea.value <> {@field='attr_value'}
               or ea.attribute_id <> (select attribute_id from attributes where element_type = '{@field='element_type'}' and attribute_code = '{@field='attr_code'}'))
              and ea.attribute_id in (select attribute_id from attributes where attribute_code = '{@field='attr_code'}');
            if @@ROWCOUNT > 0
             update elements set dt_upd = getdate() where element_id = {@field='id_element'};
          end
          else
          begin
            insert into [elements_attrs_{@field='attr_type'}] (element_id, attribute_id, [value])
             select {@field='id_element'} as element_id, a.attribute_id, {@field='attr_value'} as value
             from attributes a 
             where a.element_type = '{@field='element_type'}' and a.attribute_code = '{@field='attr_code'}';
            update elements set dt_upd = getdate() where element_id = {@field='id_element'};
          end]]>
    </query>
    <query name="next-elements">
      <![CDATA[select ec.child_element_id, e.element_type from elements_contents ec
        join [elements] e on e.element_id = ec.child_element_id and isnull(e.deleted, 0) = 0
         where ec.element_id = (select top 1 element_id from elements_contents where child_element_id = {@field='id_element'})
          and ec.[order] >= (select top 1 [order] from elements_contents where child_element_id = {@field='id_element'})
        order by ec.[order]]]>
    </query>
    <query name="move-up">
      <![CDATA[select top 2 ec.* from elements_contents ec 
        join [elements] e on e.element_id = ec.child_element_id 
         and isnull(e.deleted, 0) = 0 {@field='filter_stored_1'} 
        where ec.child_element_id = {@field='element_id'}
        or (ec.element_id = (select top 1 element_id from elements_contents where child_element_id = {@field='element_id'})
          and [order] < (select top 1 ec2.[order] from elements_contents ec2 
            join [elements] e2 on e2.element_id = ec2.child_element_id 
             and isnull(e2.deleted, 0) = 0 {@field='filter_stored_2'} 
            where ec2.child_element_id = {@field='element_id'}))
        order by [order] desc]]>
    </query>
    <query name="after-move-up">
      <![CDATA[update elements_contents set [order] = {@field='order_2'} where elements_contents_id = {@field='id_1'};
        update elements_contents set [order] = {@field='order_1'} where elements_contents_id = {@field='id_2'}]]>
    </query>
    <query name="move-end">
      <![CDATA[select top 2 ec.* from elements_contents ec 
        join [elements] e on e.element_id = ec.child_element_id and isnull(e.deleted, 0) = 0
        where ec.child_element_id = {@field='element_id'}
        or (ec.element_id = (select top 1 element_id from elements_contents where child_element_id = {@field='element_id'})
          and [order] = (select max(ec2.[order]) 
					  from elements_contents ec2 
					  join [elements] e2 on e2.element_id = ec2.child_element_id and isnull(e2.deleted, 0) = 0
					  where ec2.element_id = ec.element_id))
        order by [order]]]>
    </query>
    <query name="after-move-end">
      <![CDATA[update elements_contents set [order] = [order] - 1 
          where element_id = {@field='element_id'} and [order] > {@field='order_1'};
        update elements_contents set [order] = {@field='order_2'} where elements_contents_id = {@field='id_1'}]]>
    </query>
    <query name="move-first">
      <![CDATA[select top 2 ec.* from elements_contents ec 
        join [elements] e on e.element_id = ec.child_element_id and isnull(e.deleted, 0) = 0
        where ec.child_element_id = {@field='element_id'}
        or (ec.element_id = (select top 1 element_id from elements_contents where child_element_id = {@field='element_id'})
          and [order] = (select min(ec2.[order]) 
					  from elements_contents ec2 
					  join [elements] e2 on e2.element_id = ec2.child_element_id and isnull(e2.deleted, 0) = 0
					  where ec2.element_id = ec.element_id))
        order by [order]]]>
    </query>
    <query name="after-move-first">
      <![CDATA[update elements_contents set [order] = [order] + 1 
          where element_id = {@field='element_id'} and [order] < {@field='order_2'};
      update elements_contents set [order] = {@field='order_1'} where elements_contents_id = {@field='id_2'};]]>
    </query>
    <query name="paste-after">
      <![CDATA[update elements_contents set [order] = [order] + 1
          where element_id = (select top 1 element_id from elements_contents where child_element_id = {@field='ref_id'})
            and [order] > (select top 1 [order] from elements_contents where child_element_id = {@field='ref_id'});
        delete from elements_contents where child_element_id = {@field='element_id'};
        insert into elements_contents (element_id, child_element_id, [order])
          select top 1 element_id, {@field='element_id'} as child_element_id, [order] + 1 as [order]
          from elements_contents where child_element_id = {@field='ref_id'}]]></query>
    <query name="paste-before">
      <![CDATA[update elements_contents set [order] = [order] + 1
        where element_id = (select top 1 element_id from elements_contents where child_element_id = {@field='ref_id'})
          and [order] >= (select top 1 [order] from elements_contents where child_element_id = {@field='ref_id'});
      delete from elements_contents where child_element_id = {@field='element_id'};
      insert into elements_contents (element_id, child_element_id, [order])
        select top 1 element_id, {@field='element_id'} as child_element_id, [order] - 1 as [order]
        from elements_contents where child_element_id = {@field='ref_id'}]]></query>
    <query name="paste-inside">
      <![CDATA[delete from elements_contents where child_element_id = {@field='element_id'};
        insert into elements_contents (element_id, child_element_id, [order])
          select t.element_id, {@field='element_id'} as child_element_id, t.new_order
          from (select {@field='ref_id'} as element_id, isnull(max(ec.[order]) + 1, 0) as new_order 
            from elements_contents ec 
            where ec.element_id = {@field='ref_id'}
              and not exists (select top 1 1 from elements 
              where element_id = ec.child_element_id and isnull(deleted, 0) > 0)) t]]></query>
  </queries>
</config>

